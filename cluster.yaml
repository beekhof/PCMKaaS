heat_template_version: 2013-05-23

description: Template that installs a cluster of servers with a
             management node.  If you are not using a RHEL based
             image, be sure to set image_user correctly.

parameters:
  image:
    type: string
    label: Image name or ID
    description: Systemd-based image to be used for instances
    default: ha-guest
  image_user:
    type: string
    label: Username
    description: Name of the user that is permitted to connect to the image
    default: cloud-user
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: overcloud
  public_network:
    type: string
    label: Public network name or ID
    description: Public network to attach server to.
    default: cluster-external
  cluster_size:
    type: number
    label: Cluster size
    description: Number of instances in cluster.
    default: 3
  pool_size:
    type: number
    label: Pool size
    description: Number of VIPs to create
    default: 3

resources:
  uuid:
    type: OS::Heat::RandomString
    properties:
      length: 8

  cluster_key:
    type: lib/keypair.yaml
    properties:
      prefix: { "Fn::Join": [ '-', [ 'cluster', { get_param: 'OS::stack_name' } ]] }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { "Fn::Join": [ '-', [ 'cluster-sec', { get_param: 'OS::stack_name' } ]] }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 2222
          port_range_max: 2224
        - protocol: udp
          port_range_min: 5404
          port_range_max: 5405

  private_network:
    type: lib/private_network.yaml
    properties:
      public_network: { get_param: public_network }
      suffix: { get_param: 'OS::stack_name' }

  vips:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: pool_size }
      resource_def:
        type: lib/floating_ip.yaml
        properties:
          name: { "Fn::Join": [ '-', [ 'vip', { get_param: 'OS::stack_name' }, '%index%' ]] }
          private_network: { get_attr: [private_network, name] }
          public_network: { get_param: public_network }
          security_group: { get_resource: security_group }
          
  cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: cluster_size }
      resource_def:
        type: lib/node.yaml
        properties:
          name: { "Fn::Join": [ '-', [ 'cluster', { get_param: 'OS::stack_name' }, '%index%' ]] }
          image: { get_param: image }
          flavor: { get_param: flavor }
          key: { get_attr: [cluster_key, name] }
          cluster_pass: { get_resource: uuid }
          private_network: { get_attr: [private_network, name] }
          public_network: { get_param: public_network }
          security_group: { get_resource: security_group }

  management:
      type: lib/manage.yaml
      properties:
        image: { get_param: image }
        image_user: { get_param: image_user }
        flavor: { get_param: flavor }
        key: { get_param: key }
        cluster_key: { get_attr: [cluster_key, private_key] }
        cluster_pass: { get_resource: uuid }
        private_network: { get_attr: [private_network, name] }
        public_network: { get_param: public_network }
        security_group: { get_resource: security_group }
        prefix: { "Fn::Join": [ '-', [ 'cluster', { get_param: 'OS::stack_name' }]] }
        server_ips: { get_attr: [cluster, ip] }
        server_names: { get_attr: [cluster, name] }
        cluster_ips: { get_attr: [vips, fixed_ip] }

outputs:
  ip:
    description: The public IP address to access the server.
    value: { get_attr: [management, public_ip] }
  vip:
    description: The addresses to access services managed by the cluster.
    value: { get_attr: [vips, fixed_ip] }
  key:
    description: The internal cluster password.
    value: { get_resource: uuid }
