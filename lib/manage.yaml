heat_template_version: 2013-05-23

description: Template that installs a small example web server.

parameters:
  prefix:
    type: string
    label: Cluster node name
    description: Stem from which to create a node name
    default: cluster
  offset:
    type: number
    label: Cluster node number
    description: Number of this instance in the cluster
    default: 0
  cluster_size:
    type: number
    label: Cluster size
    description: Number of instances in cluster.
    default: 3
  servers:
    type: comma_delimited_list
    label: Servers
    description: Comma separated list of private IPs in the cluster.
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use an Ubuntu based image.
    default: trusty-server-cloudimg-amd64
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.tiny
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: default
  public_network:
    type: string
    label: Private network name or ID
    description: Network to attach server to.
    default: private
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach server to.
    default: private
  security_group:
    type: string
    description: Public network security group

resources:
  signal_handle:
    type: "OS::Heat::SwiftSignalHandle"

  wait_on_server:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: signal_handle}
      count: 1
      timeout: 600

  floating_ip:
    type: floating_ip.yaml
    properties:
      public_network: { get_param: public_network }
      private_network: { get_param: private_network }
      security_group: { get_param: security_group }

  management_node:
    type: OS::Nova::Server
    properties:
      name: { "Fn::Join": [ '-', [ { get_param: prefix }, 'manage' ]] }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      metadata:
        servers: { get_param: servers }
      networks:
        - port: { get_attr: [floating_ip, port] }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            # Replace all occurances of "wc_notify" in the script with an
            # appropriate curl PUT request using the "curl_cli" attribute
            # of the SwiftSignalHandle resource
            wc_notify:   { get_attr: ['signal_handle', 'curl_cli'] }
            __pass__:    { get_param: prefix }
            __prefix__:  { get_param: prefix }
            __count__:   { get_param: cluster_size }
            __store__:   '/usr/share/'
          template: |
            #!/bin/sh -ex

            /usr/bin/logger "beekhof: success"

            # write the update script
            cat >>__store__/update_servers.py <<EOF
            import sys
            import json
            import subprocess
            
            # load server list from metadata
            sfile = '__store__/servers.json'
            metadata = json.loads(sys.stdin.read())
            new_servers = json.loads(metadata.get('meta', {}).get('servers', '[]'))
            if not new_servers:
                sys.exit(1)  # bad metadata
            
            # compare against known list of servers
            current_servers = json.loads(open(sfile).read())
            if current_servers == new_servers:
                sys.exit(0)  # no changes
            
            # record updated list of servers
            open(sfile, 'wt').write(json.dumps(new_servers))
            
            # generate a new config file
            f = open('__store__/servers.list', 'wt')
            for i, server in enumerate(new_servers):
                f.write('    server server-{0} {1}:{2}\n'.format(i, server, __port__))
            f.close()
            EOF
            
            short_nodes=""
            offset=0
            while [ $offset -lt __count__ ]; do
                short_nodes="${short_nodes} $(echo __prefix__-${offset})"
                offset=$(expr $offset + 1)
            done
            echo $short_nodes

            # Assuming long running operation completed successfully, notify success signal
            wc_notify --data-binary '{"status": "SUCCESS", "data": "Script execution succeeded"}'
  
            # Alternatively if operation fails a FAILURE with reason and data may be sent,
            # notify failure signal example below
            # wc_notify --data-binary '{"status": "FAILURE", "reason":"Operation failed due to xyz error", "data":"Script execution failed"}'

outputs:
  name:
    description: Name of the tiny instance.
    value: { get_attr: [cluster_instance, name] }
  ip:
    description: The IP address of the tiny instance.
    value: { get_attr: [cluster_instance, first_address] }
  public_ip:
    description: The public IP address of the tiny instance.
    value: { get_attr: [floating_ip, ip] }
