heat_template_version: 2013-05-23

description: Template that creates a private network.

parameters:
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public
  suffix:
    type: string
    label: Suffix for identifying the private network
    description: Suffix
    default: auto
  dns:
    type: comma_delimited_list
    label: DNS nameservers
    description: Comma separated list of DNS nameservers for the private network.
    default:
      - '8.8.8.8'
      - '8.8.4.4'

resources:
  octone:
    type: OS::Heat::RandomString
    properties:
      character_classes: [{"class": digits}]
      length: 2

  octtwo:
    type: OS::Heat::RandomString
    properties:
      character_classes: [{"class": digits}]
      length: 2

  private_network:
    type: OS::Neutron::Net
    properties:
      name: { "Fn::Join": [ '-', [ 'private-net', { get_param: suffix } ]] }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: private_network }
      cidr: { "Fn::Join": [ '.', [ '10', { get_attr: [octone, value] }, { get_attr: [octtwo, value] }, '0/24' ]] }
      dns_nameservers: { get_param: dns }
      name: { "Fn::Join": [ '-', [ 'private-subnet', { get_param: suffix } ]] }

  router:
    type: OS::Neutron::Router
    properties:
      name: { "Fn::Join": [ '-', [ 'private-router', { get_param: suffix } ]] }
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

outputs:
  name:
    description: The private network.
    value: { get_attr: [private_network, name] }
